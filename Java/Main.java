package Java;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;

/**
 * Main.java
 * 
 * This driver program reads all 12 input files (generated by your DataGenerator program)
 * and runs the FFD algorithm (from FFD.java) on each file.
 * It measures the execution time and the number of bins used.
 * Finally, it outputs a table listing results for FF (currently empty, printed as "N/A")
 * and for FFD for each input file.
 */
public class Main {
    // Bin capacity is fixed at 10.
    public static final int BIN_CAPACITY = 10;
    
    public static void main(String[] args) {
        // Define input sizes and case types.
        int[] sizes = {100, 1000, 5000, 10000};
        String[] cases = {"average", "best", "worst"};
        
        // Build a list of input file names (e.g., "100_average.txt", "100_best.txt", etc.)
        ArrayList<String> fileNames = new ArrayList<>();
        for (int size : sizes) {
            for (String cs : cases) {
                fileNames.add(size + "_" + cs + ".txt");
            }
        }
        
        // Prepare two arrays to store results for FF and FFD.
        // For now, FF results will remain empty ("N/A") while FFD results will be computed.
        String[] ffResults = new String[fileNames.size()];
        String[] ffdResults = new String[fileNames.size()];
        
        // Process each file.
        for (int i = 0; i < fileNames.size(); i++) {
            String fileName = fileNames.get(i);
            int[] items = readItemsFromFile(fileName);
            if (items == null) {
                // Mark error if file reading fails.
                ffResults[i] = "Error";
                ffdResults[i] = "Error";
                continue;
            }
            
            // Run FFD algorithm and measure execution time.
            long startTime = System.nanoTime();
            int binsUsed = FFD.firstFitDecreasing(items, BIN_CAPACITY);
            long endTime = System.nanoTime();
            long durationNano = endTime - startTime;
            double durationMillis = durationNano / 1e6; // Convert nanoseconds to milliseconds.
            
            // Store the FFD results: number of bins and execution time.
            ffdResults[i] = "Bins: " + binsUsed + ", Time: " + String.format("%.3f", durationMillis) + " ms";
            
            // For FF, leave it empty (or mark as "N/A" in the table).
            ffResults[i] = "";
        }
        
        // Print out the results in a table.
        printResultsTable(fileNames, ffResults, ffdResults);
    }
    
    /**
     * Reads item sizes from a text file.
     * Each line in the file should contain a single integer.
     *
     * @param fileName the name of the file to read.
     * @return an array of integers read from the file; null if an error occurs.
     */
    public static int[] readItemsFromFile(String fileName) {
        ArrayList<Integer> list = new ArrayList<>();
        try (Scanner sc = new Scanner(new File(fileName))) {
            while (sc.hasNextLine()) {
                String line = sc.nextLine().trim();
                if (!line.isEmpty()) {
                    int value = Integer.parseInt(line);
                    list.add(value);
                }
            }
        } catch (FileNotFoundException e) {
            System.err.println("File not found: " + fileName);
            return null;
        }
        
        // Convert the ArrayList<Integer> to an int[].
        int[] items = new int[list.size()];
        for (int i = 0; i < list.size(); i++) {
            items[i] = list.get(i);
        }
        return items;
    }
    
    /**
     * Prints the experimental results in a table format.
     * The table includes the input file names as columns, and two rows: one for FF (empty/N/A)
     * and one for FFD (showing number of bins and execution time).
     *
     * @param fileNames  a list of input file names.
     * @param ffResults  an array of results for the FF algorithm.
     * @param ffdResults an array of results for the FFD algorithm.
     */
    public static void printResultsTable(ArrayList<String> fileNames, String[] ffResults, String[] ffdResults) {
        System.out.println("-----------------------------------------------------------------------------------------------");
        // Print header row with file names.
        System.out.printf("%-20s", "Input File");
        for (String fname : fileNames) {
            System.out.printf("%-30s", fname);
        }
        System.out.println();
        System.out.println("-----------------------------------------------------------------------------------------------");
        
        // Print FF row (currently empty, so we display "N/A").
        System.out.printf("%-20s", "FF");
        for (String res : ffResults) {
            if (res.isEmpty()) {
                System.out.printf("%-30s", "N/A");
            } else {
                System.out.printf("%-30s", res);
            }
        }
        System.out.println();
        
        // Print FFD row with results.
        System.out.printf("%-20s", "FFD");
        for (String res : ffdResults) {
            System.out.printf("%-30s", res);
        }
        System.out.println();
        System.out.println("-----------------------------------------------------------------------------------------------");
    }
}

